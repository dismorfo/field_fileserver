<?php

/**
 * @file
 * An example field using the Field Types API.
 */

/**
 * @defgroup field_fileserver
 * @ingroup DLTS
 * @{
 *
 * Based on example module and Barry Jaspan's presentation at Drupalcon Paris,
 * @link http://acquia.com/community/resources/acquia-tv/intro-field-api-module-developers Video Presentation @endlink
 *
 * Providing a field requires:
 * - Defining a field:
 *   - hook_field_info()
 *   - hook_field_schema()
 *   - hook_field_validate()
 *   - hook_field_is_empty()
 *
 * - Defining a formatter for the field (the portion that outputs the field for
 *   display):
 *   - hook_field_formatter_info()
 *   - hook_field_formatter_view()
 *
 * - Defining a widget for the edit form:
 *   - hook_field_widget_info()
 *   - hook_field_widget_form()
 *
 * Our module defines the field in field_fileserver_field_info(),
 * field_fileserver_field_validate() and field_fileserver_field_is_empty().
 * field_fileserver_field_schema() is implemented in field_fileserver.install.
 *
 * Our module sets up a formatter in field_fileserver_field_formatter_info() and
 * field_fileserver_field_formatter_view(). These are the API hooks that present
 * formatted and themed output to the user.
 *
 * And finally, our module defines the widget in
 * field_fileserver_field_widget_info() and field_fileserver_field_widget_form().
 * The widget is the form element used to receive input from the user
 * when the field is being populated.
 *
 * @see field_types
 * @see field
 */

/**
 * Implements hook_menu().
 * https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_menu/7
 */
function field_fileserver_menu() {
  /**
   * Admin page to administer the fileServer and theh fileServer stream wrapper
   */
  $menu = array(
    'admin/config/fileserver' => array(
      'title' => 'Administer fileserve',
      'description' => 'Administer fileserve.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('field_fileserver_admin'),
      'access arguments' => array('administer fileserver'),
      'file' => 'includes/admin.inc',
    ),
  );
  return $menu;
}

/**
 * Implements hook_permission().
 */
function field_fileserver_permission() {
  return array(
    'administer fileserver' => array(
      'title' => t('administer fileserver'),
      'description' => t('Administer the settings for the fileServer.'),
    ),
  ) ;
}

/**
 * Implements hook_stream_wrappers().
 *
 * hook_stream_wrappers() is Drupal's way of exposing the class that PHP will
 * use to provide a new stream wrapper class. In this case, we'll expose the
 * 'fileserver' scheme, e.g., "fileserver://example/example.txt"
 *
 * @see FileFilesServerStreamWrapper
 */
function field_fileserver_stream_wrappers() {
  $wrappers = array(
    'fileserver' => array(
      'name' => t('Fileserver StreamWrapper'),
      'class' => 'FileFilesServerStreamWrapper',
      'description' => t('Access file from the FileServer.'),
      'type' => STREAM_WRAPPERS_WRITE_VISIBLE,
    ),
  ) ;
  return $wrappers ;
}

/***************************************************************
 * Field Type API hooks
 ***************************************************************/

/**
 * Implementation of hook_theme().
 * https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_theme/7
 */
function field_fileserver_theme() {
  return array(
    'field_fileserver_image' => array(
      'variables' => array(),
    ),
    'field_fileserver_imageserver' => array(
      'variables' => array(),
    ),
    'field_fileserver_link' => array(
      'variables' => array(),
    ),
    'field_fileserver_text  ' => array(
      'variables' => array(),
    ),
  );
}

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function field_fileserver_field_info() {
  return array(
    'field_fileserver_uri' => array(
      'label' => t('FileServer'),
      'description' => t('Allow to use files storage in a FileServer'),
      'default_widget' => 'field_fileserver_link',
      'default_formatter' => 'field_fileserver_link',
    	'property_type' => 'field_fileserver_uri', // field_item_link
    	'property_callbacks' => array('fileserver_field_property_info_callback'),
    ),
  );
}

/**
 * Additional callback to adapt the property info of fileserver fields.
 *
 * @see entity_metadata_field_entity_property_info()
 */
function fileserver_field_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
	$property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];
	// Define a data structure so it's possible to deal with
	// both the uri title and data.
	$property['getter callback'] = 'entity_metadata_field_verbatim_get';
	$property['setter callback'] = 'entity_metadata_field_verbatim_set';
	// Auto-create the field item as soon as a property is set.
	$property['auto creation'] =  'fileserver_field_item_create';
	$property['property info'] = fileserver_field_item_property_info();
	unset($property['query callback']);
}

/**
 * Callback for creating a new, empty link field item.
 *
 * @see link_field_property_info_callback()
 */
function fileserver_field_item_create() {
  return array(
    'uri' => NULL,
    'data' => NULL,
    'label' => NULL,
  );
}

/**
 * Defines info for the properties of the link-field item data structure.
 */
function fileserver_field_item_property_info() {
	$properties['uri'] = array(
    'type' => 'varchar',
		'label' => t('The file URI'),
		'setter callback' => 'entity_property_verbatim_set',
	);
	$properties['data'] = array(
    'type' => 'text',
		'label' => t('File data'),
		'setter callback' => 'entity_property_verbatim_set',
	);
	$properties['label'] = array(
		'type' => 'text',
		'label' => t('File label'),
	  'setter callback' => 'entity_property_verbatim_set',
	);
	return $properties;
}

/**
 * Entity property info getter callback for fileserver attributes.
 */
function fileserver_field_attribute_property_get($data, array $options, $name, $type, $info) {
  return isset($data[$name]) ? array_filter($data[$name]) : array();
}

/**
 * Implements hook_field_validate().
 *
 * This hook gives us a chance to validate content that's in our
 * field. We're really only interested in the $items parameter, since
 * it holds arrays representing content in the field we've defined.
 *
 * @see field_fileserver_field_widget_error()
 */
function field_fileserver_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
	foreach ($items as $delta => $item) {
		// item must have URI
		if (!empty($item['uri'])) {
    	$pathinfo = pathinfo($item['uri']);
    	$basename = str_replace('fileserver://', '', $pathinfo['basename']);
    	$ext = pathinfo($item['uri'], PATHINFO_EXTENSION);
    	// check that we have a fileserver URI
    	if (strpos($item['uri'], 'fileserver://') === false) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'field_fileserver_invalid',
          'message' => t('Invalid scheme, make sure the URI include valid scheme (e.g., fileserver://example.jpg'),
        );
    	}
    	// check that the URI is not bigger than the allowed MySQL size for varchar with index
    	if (strlen($item['uri']) > 255) {
    		$errors[$field['field_name']][$langcode][$delta][] = array(
    			'error' => 'field_fileserver_invalid',
    			'message' => t('URI bigger than 255 character'),
    		);
    	}
    	// check that the URI contain a file extension
    	if (!$ext) {
    		$errors[$field['field_name']][$langcode][$delta][] = array(
    			'error' => 'field_fileserver_invalid',
    			'message' => t('URI dose not include a file extension'),
    		);
    	}
    	else {
    	  switch ($instance['widget']['type']) {
    		  case 'field_fileserver_text':
    		  case 'field_fileserver_link':
    			  // we only need a valid URI with a file extension
    			  // if we ever end-up with a fileserver, this will be different and
    			  // more safe/efficient.
    		  	// Drupal 7 core file.inc plus jp2 and tiff files
    		  	// see: https://api.drupal.org/api/drupal/includes%21file.inc/7
    		  	$valid_extensions = array('jpg', 'jpeg', 'gif', 'png', 'txt', 'doc', 'xls', 'pdf', 'ppt', 'pps', 'odt', 'ods', 'odp', 'jp2', 'tiff',);
    		  	// do we have a valid extension
    		  	if (!in_array($ext,$valid_extensions)) {
    		  		$errors[$field['field_name']][$langcode][$delta][] = array(
    		  		  'error' => 'field_fileserver_invalid',
    		  			'message' => t('Invalid extension found @ext', array('@ext' => $ext)),
    		  		);
    		  	}
    			  break;
    		  case 'field_fileserver_image':
    			  // check for web-safe file extentions or JP2 or TIFF
    		  	$valid_extensions = array('jpg', 'jpeg', 'gif', 'png', 'jp2', 'tiff');
    		  	if (!in_array($ext,$valid_extensions)) {
    		  		$errors[$field['field_name']][$langcode][$delta][] = array(
    		  		  'error' => 'field_fileserver_invalid',
    		  			'message' => t('Invalid mime type @mimetype', array('@mimetype' => $mimetype)),
    		  		);
    		  	}
    			  break;
    	  }
    	}
    }
	}
}

/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function field_fileserver_field_is_empty($item, $field) {
  return empty($item['uri']);
}

/**
 * Implements hook_field_formatter_info().
 *
 * We need to tell Drupal that we have two different types of formatters
 * for this field.
 *
 * @see field_fileserver_field_formatter_view()
 */
function field_fileserver_field_formatter_info() {
  return array(
    'field_fileserver_text' => array(
      'label' => t('Plain text'),
      'field types' => array('field_fileserver_uri'),
    ),
  	'field_fileserver_link' => array(
  	  'label' => t('File link '),
  		'field types' => array('field_fileserver_uri'),
    ),
  	'field_fileserver_image' => array(
  	  'label' => t('Image with CSS styles widget'),
  	  'field types' => array('field_fileserver_uri'),
    ),
    'field_fileserver_imageserver' => array(
  	  'label' => t('Image with cached styles widget'),
  	  'field types' => array('field_fileserver_uri'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * Four formatters are implemented.
 * - field_fileserver_text:
 * - field_fileserver_link
 * - field_fileserver_image:
 *
 * @see field_fileserver_field_formatter_info()
 */
function field_fileserver_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
	$element = array();
  switch ($display['type']) {
    case 'field_fileserver_text'  :
    case 'field_fileserver_link'  :
    case 'field_fileserver_image' :
    case 'field_fileserver_imageserver' :
    	foreach ($items as $delta => $item) $element[$delta] = theme($display['type'], $item);
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * Four widgets are provided.
 * - field_fileserver_text
 * - field_fileserver_link
 * - field_fileserver_image
 *
 * These widget types will eventually show up in hook_field_widget_form,
 * where we will have to flesh them out.
 *
 * @see field_fileserver_field_widget_form()
 */
function field_fileserver_field_widget_info() {
  return array(
    'field_fileserver_text' => array(
      'label' => t('Text field'),
      'field types' => array('field_fileserver_uri'),
    ),
  	'field_fileserver_link' => array(
  	  'label' => t('Link field'),
  		'field types' => array('field_fileserver_uri'),
  	),
  	'field_fileserver_image' => array(
  	  'label' => t('Image field'),
  		'field types' => array('field_fileserver_uri'),
  	),
    'field_fileserver_imageserver' => array(
  	  'label' => t('Image field'),
  		'field types' => array('field_fileserver_uri'),
  	),
  );
}

/**
 * Implements hook_field_presave().
 */
function field_fileserver_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
	$new_node = (isset($entity->nid)) ? true : false;
	if ($instance['widget']['module'] == 'field_fileserver') {
	  foreach ($items as $key => $item) {
      //check for web-safe file extentions
		  $pathinfo = pathinfo($item['uri']);
		  $basename = str_replace('fileserver://', '', $pathinfo['basename']);
		  $ext = pathinfo($items[$key]['uri'], PATHINFO_EXTENSION);
		  $mimetype = file_get_mimetype($basename);
		  $label = '';
		  switch ($instance['widget']['type']) {
		  	case 'field_fileserver_text':
		  	case 'field_fileserver_link':
		  		$new_data['uri'] = $items[$key]['uri'];
		  		$new_data['label'] = $items[$key]['label'];
		  		break;
		    case 'field_fileserver_image':
		      // valid JP2 or TIFF file extentions
		      $valid_hires_extensions = array('jp2', 'tiff', 'jpg'); // test assumptions that our image server can read all JPG images
		      // valid web-safe extentions
		      $valid_websafe_extensions = array( 'jpeg', 'gif', 'png');
		      $new_data['uri'] = $items[$key]['uri'];
		      if (!empty($items[$key]['label'])) {
			      $new_data['label'] = $items[$key]['label'];
		      }
		      if (isset($items[$key]['image_style'])) {
		        $dimmensions = explode("x", $items[$key]['image_style']);
		        if (count($dimmensions) == 2) {
		          $new_data['width'] = $dimmensions[0];
		          $new_data['height'] = $dimmensions[1];
		        }
		      }
		      else {
		      	$new_data['width'] = 0;
		      	$new_data['height'] = 230;
		      }
		      break;
		  }
		  $items[$key]['data'] = serialize($new_data);
		}
	}
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 * We provide one of four different forms, depending on the widget type of
 * the Form API item provided.
 *
 */
function field_fileserver_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
	$uri_value = isset($items[$delta]['uri']) ? trim($items[$delta]['uri']) : '';
	$data_value = isset($items[$delta]['data']) ? unserialize($items[$delta]['data']) : null;
	$uri_widget = $element;
	$data_widget = $element;
  $widget['#delta'] = $delta;
  $label = (!empty($items[$delta]['label'])) ? $items[$delta]['label'] : '';

  $label_widget = array(
    '#title' => 'Label',
  	'#suffix' => '<div class="field-fileserver-label"></div>',
  	'#type' => 'textfield',
  	'#default_value' => $label,
  	'#attributes' => array('class' => array('edit-field-fileserver-label')),
  	'#size' => 255,
  	'#maxlength' => 255,
  	'#description' => t('File label or title'),
  );

  $uri_widget += array(
    '#title' => 'File identifier',
  	'#suffix' => '<div class="field-fileserver-uri"></div>',
  	'#type' => 'textfield',
  	'#default_value' => $uri_value,
  	'#attributes' => array('class' => array('edit-field-fileserver-uri')),
  	'#size' => 255,
  	'#maxlength' => 255,
  	'#description' => t('File identifier (e.g., @identifier)', array(' @identifier' => 'fileserver://exmple.jpg')),
  );

  $data_widget += array(
    '#type' => 'hidden',
    '#default_value' => $data_value
  );

  $element['label'] = $label_widget;

  $element['uri'] = $uri_widget;

  $element['data'] = $data_widget;

  switch ($instance['widget']['type']) {
    case 'field_fileserver_image':
    	$options = array();
    	$options['oxs'] = 'Original size';
    	// Laura's default one. Create a image style in Drupal?
    	// Ask Laura what she needs to get this working as she want.
    	$options['0x230'] = 'Scale height to 230';
    	if (isset($data_value['width']) || isset($data_value['height'])) {
    	  $data_value_width = (isset($data_value['width'])) ? $data_value['width'] : 0;
    	  $data_value_height = (isset($data_value['height'])) ? $data_value['height'] : 0;
    	  $default_image_style = $data_value_width . 'x' . $data_value_height;
    	}
    	else {
    		$default_image_style = '0x230';
    	}
    	foreach (image_styles() as $key => $style) {
    		$style = image_style_load($key);
    		$slice = array_slice($style['effects'], 0, 1);
    		$effects = array_shift($slice);
    		if ($effects['name'] === 'image_scale') {
    		  $width = $effects['data']['width'];
    			$height = $effects['data']['height'];
    			$options[$width . 'x' . $height] = $style['label'];
    		}
    	}
    	$image_style_widget = array(
        '#type' => 'select',
        '#title' => t('Image style'),
        '#options' => $options, // Drupal's core style + our modules options
        '#default_value' => $default_image_style,
        '#description' => t('Select the <em>image style</em> you want to apply to this image.'),
      );
      $element['image_style'] = $image_style_widget;
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 * @see field_example_field_validate()
 * @see form_error()
 */
function field_fileserver_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'field_fileserver_invalid':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Returns HTML for a image server from the image fileserver.
 *
 * @param $variables
 *   An associative array containing:
 *   - file: A file object to which the link will be created.
 *
 * @ingroup themeable
 */
function theme_field_fileserver_image($variables) {
  $attributes = array();
  $attributes['src'] = file_create_url($variables['uri']);
  $data = unserialize($variables['data']);
  $attributes['alt'] = (isset($data['label'])) ? $data['label'] : '';
  $attributes['class'] = array('field', 'field-fileserver','field-fileserver-image');
  if (isset($data['width']) && is_numeric($data['width']) && $data['width'] != 0) {
    $attributes['width'] = $data['width'];
  }
  if (isset($data['height']) && is_numeric($data['height']) && $data['height'] != 0) {
  	$attributes['height'] = $data['height'];
  }
  return array('#type' => 'html_tag', '#tag' => 'img', '#attributes' => $attributes);
}

function theme_field_fileserver_imageserver($variables) {
  include_once 'includes/djatoka.inc' ;
  $attributes = array();
  $data = unserialize($variables['data']);
  $attributes['alt'] = (isset($data['label'])) ? $data['label'] : '';
  $attributes['class'] = array('field', 'field-fileserver','field-fileserver-image');
  $width = 0;
  $height = 230;

  if (isset($data['width']) && is_numeric($data['width']) && $data['width'] != 0) {
    $width = $data['width'];
  }

  if (isset($data['height']) && is_numeric($data['height']) && $data['height'] != 0) {
  	$height = $data['height'];
  }

  $variables['image_style'] = $width . 'x' . $height;

  $attributes['src'] = djatoka_url($variables);

  return array('#type' => 'html_tag', '#tag' => 'img', '#attributes' => $attributes);
}

function theme_field_fileserver_text($variables) {
  $value = file_create_url($variables['uri']);
  $label = (!empty($variables['label'])) ? $variables['label'] : '';
  $element = array(
    '#type' => 'html_tag',
    '#tag' => 'span',
    '#attributes' => array(
      'class' => array('field', 'field-fileserver', 'field-fileserver-text'),
    	'data-label' => $label,
    ),
    '#value' => $value,
  );
  return $element;
}

function theme_field_fileserver_link($variables) {
  $uri = file_create_url($variables['uri']);
  $label = (isset($variables['label']) && !empty($variables['label'])) ? $variables['label'] : $uri;
  $element = array(
    '#type' => 'html_tag',
    '#tag' => 'a',
    '#attributes' => array(
      'href' => $uri,
      'class' => array('field', 'field-fileserver', 'field-fileserver-link'),
    ),
    '#value' => $label,
  );
  return $element;
}

/**
 * @} End of "defgroup field_fileserver".
 */
